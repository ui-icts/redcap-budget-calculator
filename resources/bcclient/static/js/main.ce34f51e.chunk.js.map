{"version":3,"sources":["components/budgetcalculator/images/logo.png","components/budgetcalculator/BCJumbotron.jsx","components/budgetcalculator/BCInfoModal.jsx","components/budgetcalculator/BCSaveModal.jsx","components/tools/SearchBox.jsx","js/config.js","js/ServiceData.js","components/servicecatalog/ServiceMenuItem.jsx","components/tools/NoData.jsx","components/servicecatalog/ServiceSubMenus.jsx","components/servicecatalog/ServicesDDList.jsx","contexts/BudgetContext.jsx","components/servicecatalog/ServiceCatalogDDMenu.jsx","js/BudgetUtils.js","js/DownloadPdf.js","components/budgetcalculator/BCNav.jsx","components/budgetcalculator/BCSubmitModal.jsx","components/budgetcalculator/BCSubmitSuccessModal.jsx","components/budgetcalculator/icons/TrashIcon.jsx","components/budgetcalculator/icons/InfoCircleIcon.jsx","components/budgetcalculator/icons/TimesIcon.jsx","components/budgetcalculator/icons/CheckIcon.jsx","contexts/ClinicalRow.jsx","contexts/BudgetConsumerClinicalRows.jsx","contexts/NonClinicalRow.jsx","contexts/BudgetNONClinicalRowsConsumer.jsx","components/budgetcalculator/icons/MinusIcon.jsx","components/budgetcalculator/icons/ArrowLeftIcon.jsx","components/budgetcalculator/icons/ArrowRightIcon.jsx","components/budgetcalculator/BCClincalHeader.jsx","contexts/BudgetTotal.jsx","components/budgetcalculator/BCServicesTable.jsx","components/budgetcalculator/BudgetCalculator.jsx","js/PerServiceData.js","contexts/BudgetProvider.jsx","components/budgetcalculator/BCWelcomeModal.jsx","components/BudgetCalculatorPage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","BCJumbotron","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","id","style","display","src","logo","alt","clear","Component","BCInfoModal","handleSubmit","e","preventDefault","setState","validated","infoForm","checkValidity","infoCallback","subjectCount","current","value","visitCount","handleCancel","hideInfoCallback","subjectCountInvalid","visitCountInvalid","React","createRef","showInfoSubjectCount","showInfoVisitCount","error","_this2","Modal","show","showInfo","centered","backdrop","role","aria-labelledby","aria-hidden","Form","ref","form","onSubmit","handleConfirm","Body","Row","Group","Label","htmlFor","Control","type","name","min","step","className","required","Feedback","pattern","Footer","Button","variant","onClick","BCSaveModal","saveForm","submitSaveCallback","budgetTitle","showWelcome","handleHideSave","handleClose","showSaveSuccess","showSave","onHide","SearchBox","updateSearchResults","keyword","inputValue","trim","searchFunction","lastSearchValue","searchKeywords","inputKeywords","target","length","placeholder","aria-label","onChange","bcConfig","urlBase","urlPathToREDCap","serviceCatalogApi","perServiceAPI","ServiceData","data","setData","stateData","setStateData","fetchServicesFromApi","bind","filterServiceInstancesByKeyword","parseJsonListOfServices","console","log","serviceCatalogAPI","fetch","then","response","json","jsondata","_jsondata","fullServiceList","catch","err","rawSearchWord","searchWord","replace","jsonataSearch","dataFound","jsonata","evaluate","Array","isArray","serviceJson","ServiceMenuItem","serviceobj","servicename","href","addBCService","NoData","Card","Header","ServiceSubMenus","reduceToTree","serviceTree","core","category","service","coreKey","categoryKey","serviceKey","push","createMenuTree","menuTreeObj","values","reduce","entries","map","coreobj","key","categoryobj","servicecatalog_ServiceMenuItem","JSON","stringify","objectSpread2","bcServiceData","Fragment","tools_NoData","ServicesDDList","_useState","useState","_useState2","slicedToArray","_useState3","serviceDataObj","useEffect","tools_SearchBox","Dropdown","Divider","servicecatalog_ServiceSubMenus","BudgetContext","createContext","ServiceCatalogDDMenu","contexts_BudgetContext","Consumer","context","servicecatalog_ServicesDDList","BudgetUtils","dollars","Intl","NumberFormat","currency","minimumFractionDigits","format","total","isNaN","findYourRate","fundingType","federalrate","industryrate","obj","parseInt","clinical","DownloadPdf","bu","toDollars","isClinical","isNotClinical","columnLookup","title","dataKey","clinicalHeaders","nonClinicalHeaders","originalBudget","budgetCopy","clinicalTotals","nonclinicalTotals","grandTotal","perService","rows","bcrows","clinicalData","filter","forEach","industry_rate","yourCost","per_service","vc","costPerSubject","totalCost","nonClinicalData","quantity","doc","jsPDF","autoTable","head","body","theme","margin","top","startY","previous","finalY","text","save","BCNav","handleEditBudgetInfoClick","showInfoCallback","handleDownloadAsPdfClick","savePdf","bcstate","data-toggle","aria-haspopup","aria-expanded","servicecatalog_ServiceCatalogDDMenu","BCSubmitModal","handleSaveConfirmSubmission","saveSubmissionForm","handleBCSubmitCallback","username","firstName","lastName","email","irbNumber","showBCSubmit","handleBCSubmitHide","closeButton","Title","BCSubmitSuccessModal","submitSuccessCallback","showSubmitSuccess","TrashIcon","index_es","icon","faTrash","size","color","InfoCircleIcon","OverlayTrigger","placement","delay","hide","overlay","Popover","Content","description","faInfoCircle","TimesIcon","faTimes","CheckIcon","faCheck","ClinicalRow","handleTrash","persist","removeBCService","handleSubjectCountChange","event","csUpdateSubjectCountById","chooseCheckboxType","index","visitIndex","checkOrNotCheck","isChecked","checkedStatusIndex","Check","checked","csVisitChanged","getCheckboxes","cells","i","handleVisitButton","select","handleVisitRowButtonClicked","getCheckButton","anyVistsNotSelected","width","icons_CheckIcon","icons_TimesIcon","onInput","handleUpdateTotals","borderRightStyle","icons_TrashIcon","icons_InfoCircleIcon","perServiceReadable","chsVisitIndex","bcimShowInfoVisitCount","BudgetClinicalRowsConsumer","displayRows","colSpan","contexts_ClinicalRow","service_description","federal_rate","budgetcalculator_BCInfoModal","bcimShowInfo","bcimShowInfoSubjectCount","bcimInfoCallback","bcimHandleHideInfo","NonClinicalRow","handleQtyCountChange","validateTotalCost","BudgetNONClinicalRowsConsumer","isNonClinical","contexts_NonClinicalRow","addNonclinicalCost","removeNonclinicalCost","MinusIcon","faMinus","ArrowLeft","faArrowLeft","ArrowRight","faArrowRight","BCClincalHeader","getColumButtons","buttonStates","callback","disabled","retval","rowCount","_loop","icons_MinusIcon","getColumNumbers","baseIndex","maxIndex","rowSpan","chsLeftNavState","cshNavLeft","ArrowLeftIcon","chsRightNavState","cshNavRight","ArrowRightIcon","chsBtnStates","cshButtonClicked","BudgetTotal","grand","nonclinical","BCServicesTable","handleSubmitButtonClick","handleSubjectsChange","myCallback","textInput","myHide","budgetcalculator_BCClincalHeader","BudgetConsumerClinicalRows","textAlign","contexts_BudgetTotal","contexts_BudgetNONClinicalRowsConsumer","budgetcalculator_BCSubmitModal","budgetcalculator_BCSubmitSuccessModal","BudgetCalculator","handleHideInfo","showSubmitCallback","showSubmit","handleHideWelcome","budgetcalculator_BCJumbotron","budgetcalculator_BCSaveModal","budgetcalculator_BCNav","budgetcalculator_BCServicesTable","PerServiceData","fetchPerServicesFromApi","setPerService","BudgetProvider","psdSetPerService","perServiceArray","csHeaderUpdate","btnIndex","buttonState","newVisitState","columnIndex","bcrowsCopy","v","cshSubjectsAndVisitsNeeded","bcInfoModalUsedOnce","bcInfoModalNeeded","bcimUpdateAllSubjectCountsAndVisitCounts","vcArray","cshUpdateCheckButtons","btnStates","clinicalRows","visitCountIndex","stateToPush","leftArrow","rightArrow","cshUpdateAllClinicalTotals","csUpdateClinicalTotals","csUpdateColumnCheckButtonState","rowsArray","foundNotSelected","visibleColumn","chsBtnStatesCopy","toConsumableArray","csUpdateRowCheckButtonState","rowId","visitsArray","visitCountLength","csSetRowTotal","numberOfVisits","totalRowCost","csTotalPerSubject","currentRow","csCalculateClinicalTotals","acc","row","calculateGrandTotals","ncsCalculateNonclinicalTotals","reducer","cur","setFundingType","rowNotClinical","updatedBCRows","serviceId","rowIsClinical","addServiceUpdates","needsSubjectsAndVisits","serviceObj","oneTimeUseId","serviceRow","Math","random","toString","substr","parse","defineProperty","bcimShowSave","perServiceData","Provider","chsVisitAllSelected","children","BCWelcomeModal","handleCheck","buttonActive","selection","welcomeCallback","as","FormCheck","Input","BudgetCalculatorPage","contexts_BudgetProvider","budgetcalculator_BudgetCalculator","budgetcalculator_BCWelcomeModal","hideWelcome","App","components_BudgetCalculatorPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce34f51e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.90c7de32.png\";","import React, { Component } from 'react';\nimport logo from \"./images/logo.png\";\n\n\nclass BCJumbotron extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {  }\n  }\n  render() { \n    return ( \n            <div id=\"wrapper\">\n                <div id=\"title\">\n                    <h1>Budget Calculator (PROTOTYPE)</h1>\n                    <br />\n                    <br />\n                    <div id=\"budgetTitleDisplay\" style={{display: 'none'}}>\n                        <h5>Title: <span id=\"budgetTitleText\"></span></h5>\n                        <small>Last saved <span id=\"lastSaveTime\"></span></small>\n                    </div>\n                </div>\n                <img id=\"logo\" src={ logo } alt=\"Center for Clinical &amp; Translational Science\" />\n                <div style={{clear: 'both'}}></div>\n            </div>\n     );\n  }\n}\n \nexport default BCJumbotron;","import React, { Component } from 'react';\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nclass BCInfoModal extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      infoCallback: props.infoCallback,\n      hideInfoCallback: props.hideInfoCallback,\n      subjectCountInvalid: \"false\",\n      visitCountInvalid: \"false\",\n      validated: false\n    };\n    this.subjectCount = React.createRef();\n    this.visitCount = React.createRef();\n  }\n\n  componentDidUpdate() {\n    try {\n      this.subjectCount.current.value=this.props.showInfoSubjectCount;\n      this.visitCount.current.value=this.props.showInfoVisitCount;\n    }\n    catch(error) {\n      //ignore ... 'current' not there yet\n    }\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    //validate fields\n    this.setState({validated: true});\n\n    if (this.infoForm.checkValidity()) {\n      //save state\n      this.state.infoCallback( {subjectCount: this.subjectCount.current.value,  visitCount: this.visitCount.current.value});\n    }\n  };\n\n  handleCancel = (e) => {\n    e.preventDefault();\n    this.state.hideInfoCallback();\n  };\n\n\n  render() {\n    return ( \n      <Modal show={this.props.showInfo} id=\"budgetInfoModal\" centered backdrop=\"static\" role=\"dialog\" aria-labelledby=\"budgetInfoModal\" aria-hidden=\"true\">\n        <Form  ref={form => this.infoForm = form} onSubmit={this.handleConfirm} validated={this.state.validated} >\n          <Modal.Body>\n            <p>Before adding clinical services, please supply this additional information:</p>\n                <Form.Row>\n                  <Form.Group>\n                    <Form.Label htmlFor=\"subject_count\">\n                      <b>Subject Count:</b>\n                    </Form.Label>\n                    <Form.Control type=\"number\" id=\"subject_count\" name=\"subject_count\" min=\"1\" step=\"1\" ref={this.subjectCount} className=\"info-field\" required />\n                    <Form.Control.Feedback type=\"invalid\">\n                      This field is required.\n                    </Form.Control.Feedback>\n                  </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                  <Form.Group>\n                    <Form.Label htmlFor=\"visit_count_default\">\n                      <b>Visit Count:</b>\n                    </Form.Label>\n                    <Form.Control type=\"text\" pattern=\"\\d+\" id=\"visit_count_default\" name=\"visit_count_default\" ref={this.visitCount} className=\"info-field\" required />\n                    <Form.Control.Feedback type=\"invalid\">\n                      This field is required.\n                    </Form.Control.Feedback>\n                  </Form.Group>\n                </Form.Row>\n              <input type=\"hidden\" name=\"redcap_csrf_token\" value=\"\" />\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.handleCancel}>Cancel</Button>\n            <Button variant=\"primary\" type=\"submit\" onClick={this.handleSubmit}>Confirm</Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n     );\n  }\n}\n \nexport default BCInfoModal;","import React, { Component } from 'react';\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nclass BCSaveModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showSaveSuccess: props.showSaveSuccess,\n      submitSaveCallback: props.submitSaveCallback,\n      handleHideSave: props.handleHideSave,\n      validated: false\n    }\n    this.budgetTitle = React.createRef();\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    //validate fields\n    this.setState({validated: true});\n\n    if (this.saveForm.checkValidity()) {\n      //save state\n      this.state.submitSaveCallback( {budgetTitle: this.budgetTitle.current.value} );\n      this.setState({showWelcome: false});\n\n      //hide the modal\n      this.state.handleHideSave();\n    }\n  };\n\n  handleClose = (e) => {\n    try {\n      //only used when hide comes from the cancel/close button\n      e.preventDefault();\n    } catch (e) {\n      // not needed\n    }\n    this.state.handleHideSave();\n  };\n\n  render() {\n    return ( \n      <Modal id=\"saveModal\" centered show={this.props.showSave} onHide={this.handleClose} role=\"dialog\" aria-labelledby=\"saveModal\" aria-hidden=\"true\">\n        <div role=\"document\">\n            <Modal.Body>\n              <div>\n                <p>Please provide a title for your budget before saving. This is for personal reference only.</p>\n              </div>\n              <Form ref={form => this.saveForm = form} onSubmit={this.handleConfirm} validated={this.state.validated}>\n                  <Form.Row>\n                    <Form.Group>\n                      <Form.Label htmlFor=\"userTitleInput\">\n                        <b>Budget Title:</b>\n                      </Form.Label>\n                      <Form.Control type=\"input\" id=\"userTitleInput\" name=\"userTitleInput\" ref={this.budgetTitle} className=\"title-field\" required />\n                      <Form.Control.Feedback type=\"invalid\">\n                        This field is required.\n                      </Form.Control.Feedback>\n                    </Form.Group>\n                  </Form.Row>\n                <input type=\"hidden\" name=\"redcap_csrf_token\" value=\"\" />\n              </Form>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button id=\"cancelSaveBtn\" variant=\"secondary\" onClick={this.handleClose} >Close</Button>\n              <Button id=\"confirmSaveBtn\" variant=\"primary\" type=\"submit\" onClick={this.handleSubmit}>Save</Button>\n            </Modal.Footer>\n        </div>\n      </Modal>\n     );\n  }\n}\n \nexport default BCSaveModal;","import React, { Component } from 'react';\n\nclass SearchBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      inputValue: '',\n      lastSearchValue: ''\n     }\n  }\n\n  updateSearchResults = () =>\n  {\n    //consider moving the update to a webworker if the UI is impacted by updates\n    let keyword = this.state.inputValue.trim();\n    this.props.searchFunction(keyword);\n    this.setState({'lastSearchValue':keyword});\n  }\n\n  searchKeywords = (e) =>\n  {\n    e.preventDefault();//stops page refresh\n    this.updateSearchResults();\n  }\n\n  inputKeywords = (e) =>\n  {\n    e.preventDefault();\n\n    //use callback to avoid action until state is actually updated\n    this.setState({'inputValue':e.target.value},\n    () => {\n      if ( this.state.inputValue.trim().length === 0)\n      {\n        if (this.state.lastSearchValue.length !== 0)\n        {\n          this.updateSearchResults();\n        }\n      }\n    });\n    \n  }\n\n  render() { \n    return ( \n\n      <form className=\"form-inline\" onSubmit={this.searchKeywords}>\n        <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search for services\" aria-label=\"Search\" value={this.state.inputValue} onChange={this.inputKeywords} />\n      </form>\n\n     );\n  }\n}\n\nexport default SearchBox;","// This is the configuration file for this React client\n// add any configuration values to the exported 'bcConfig'\n// to use the values in a react file, add\n// import { bcConfig } from 'config.js';\n// to the top of the class, modifying the config.js path\n// appropriately.\n\n// IMPORTANT ... All client side code is visible via dev tools\n//               in browsers. Never place passwords, PHI, or\n//               other private data in this configuration file.\n\nexport const bcConfig = { \n  //urlBase: 'https://redcap-dev.ccts.utah.edu', //example base URL\n  urlBase: 'http://2019augredcap:8888', \n\n  //urlPathToREDCap: '', //usually a variation of '/redcap'\n  urlPathToREDCap: '/redcap',  //example example URL path to redcap\n\n  serviceCatalogApi: '/api/?NOAUTH&type=module&prefix=budget_calculator&page=api/service_catalog_api',\n  \n  perServiceAPI: '/api/?NOAUTH&type=module&prefix=budget_calculator&page=api/per_service_api'\n  };","import jsonata from \"jsonata\";\nimport { bcConfig } from './config.js';\n\n\n//Services catalog data utility class\nclass ServiceData \n{\n  constructor (data, setData) //TODO: This constructor is being called frequently. Look into reducing the calls.\n  {\n    this.stateData = data;\n    this.setStateData = setData;\n\n    this.fetchServicesFromApi = this.fetchServicesFromApi.bind(this);\n    this.filterServiceInstancesByKeyword =  this.filterServiceInstancesByKeyword.bind(this);\n    this.parseJsonListOfServices = this.parseJsonListOfServices.bind(this);\n    console.log(\"sd ... bcConfig.urlBase=\",bcConfig.urlBase);//TODO: remove this line\n  }\n\n  //side effect of setting state in component's state passed into constructor\n  fetchServicesFromApi()\n  {\n    //all paths are configurable in 'config.js'\n    const serviceCatalogAPI = bcConfig.urlBase + bcConfig.urlPathToREDCap + bcConfig.serviceCatalogApi;\n\n    fetch(serviceCatalogAPI)\n      .then(response => response.json())\n      .then(jsondata => {\n        this._jsondata = jsondata;//need this for searches\n        this.parseJsonListOfServices(jsondata);\n        if (this.fullServiceList) \n        {\n          this.setStateData(this.fullServiceList);\n        }\n        else\n        {\n          this.setStateData([]);\n        }\n      }).catch(err => this.setStateData([]));\n  }\n\n  filterServiceInstancesByKeyword( rawSearchWord )\n  {\n    //clean up searchWord\n    let searchWord = rawSearchWord.replace(/[\\\\/]+/gi, '');\n\n    // Set stateData with filtered array of ServiceInstances\n    // To improve search speed, search the larges fields last\n    // Filter by 'core', 'category', 'service' and 'service_description' that contain search word.\n    // Is 'this._jsondata' good data? If not set data to empty array\n    let jsonataSearch = '$filter(**.service_list.*^(service), function($v) {$contains($v.core, /'+searchWord+'/i) or $contains($v.category, /'+searchWord+'/i) or $contains($v.service, /'+searchWord+'/i) or $contains($v.service_description, /'+searchWord+'/i) })';\n\n    if ((! searchWord) || (searchWord.trim()===0)) \n    {\n      jsonataSearch = '**.service_list.*^(service)';\n    }\n\n    let dataFound = jsonata( jsonataSearch ).evaluate(this._jsondata);\n\n    if (! dataFound) \n    {\n      dataFound = [];\n    }\n    else if (!Array.isArray(dataFound))\n    {\n      dataFound = [dataFound];\n    }\n    \n    this.setStateData( \n       dataFound\n      );\n\n  }\n\n  parseJsonListOfServices(serviceJson)\n  {\n    // using JSONata to search for the proper objects\n    this.fullServiceList = jsonata('**.service_list.*^(service)').evaluate(serviceJson);\n  }\n\n}\n\nexport default ServiceData;","import React, { Component } from 'react';\nclass ServiceMenuItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      serviceobj: this.props.serviceobj,\n      servicename: this.props.servicename\n     }\n  }\n\n  render() {\n    // console.log(\"service object ...\",this.state.serviceobj);\n    return ( \n      <li id=\"bc-dropdown-li\"><a className=\"dropdown-item\" href=\"#/\" onClick={(e) => this.props.addBCService(e, this.state.serviceobj)}>{this.state.servicename}</a></li>\n     );\n  }\n}\n \nexport default ServiceMenuItem;","import React, { Component } from 'react';\nimport Card from 'react-bootstrap/Card'\n\nclass NoData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {  }\n  }\n  render() { \n    return ( \n            <div className=\"my-4\">\n      <Card>\n        <Card.Header className=\"font-weight-bold\">Not Found</Card.Header>\n        <Card.Body>\n          No information available.\n        </Card.Body>\n      </Card>\n      </div>\n     );\n  }\n\n}\n\nexport default NoData;","import React, { Component } from 'react';\n\nimport ServiceMenuItem from './ServiceMenuItem';\nimport NoData from '../tools/NoData';\n\nclass ServiceSubMenus extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {  }\n  }\n\n  reduceToTree = (serviceTree, serviceobj) => {\n\n    if (! (serviceobj.core && serviceobj.category && serviceobj.service))\n    {\n      // Keep this log, even if commented out. Very useful for debugging problems in REDCap project.\n      // console.log(\"A service missing core (\"+serviceobj.category+\"), category (\"+serviceobj.core+\"), or service (\"+serviceobj.service+\") property was omited.\");\n      return serviceTree;\n    }\n\n    //getting this far means that we have everything we need to construction the tree that will become the submenu tree\n\n    let coreKey = serviceobj[\"core\"];\n    if (!serviceTree[coreKey]) {\n      serviceTree[coreKey] = [];\n    }\n\n    let categoryKey = serviceobj[\"category\"];\n    if (!serviceTree[coreKey][categoryKey]) {\n      serviceTree[coreKey][categoryKey] = [];\n    }\n\n    let serviceKey = serviceobj[\"service\"];\n    if (!serviceTree[coreKey][categoryKey][serviceKey]) {\n      serviceTree[coreKey][categoryKey][serviceKey] = [];\n    }\n    \n    serviceTree[coreKey][categoryKey][serviceKey].push(serviceobj);\n\n    return serviceTree;\n  }\n\n  createMenuTree = (data) => {\n    let menuTreeObj = Object.values(data).reduce(this.reduceToTree, {});\n\n    //NOTE: The names of submenus are unique so can be used as keys. Service names could be non-unique, but in practice generally are so for now are used for keys\n    return Object.entries(menuTreeObj).map(coreobj => (\n            <li key={coreobj} className=\"dropdown-submenu\"><a className=\"dropdown-item dropdown-toggle\" href=\"#/\">{coreobj[0]}</a>\n              <ul className=\"dropdown-menu\">\n                {\n                  Object.entries(coreobj[1]).map(categoryobj => (\n                  <li key={categoryobj} className=\"dropdown-submenu\"><a className=\"dropdown-item dropdown-toggle\" href=\"#/\">{categoryobj[0]}</a>\n                    <ul className=\"dropdown-menu\">\n                      {\n                      Object.entries(categoryobj[1]).map(serviceobj => (\n                      <ServiceMenuItem key={serviceobj} addBCService={this.props.addBCService} serviceobj={JSON.stringify(serviceobj[1])} servicename={serviceobj[0]} />\n                      ))}\n                    </ul>\n                  </li>))\n                }\n              </ul>\n            </li>\n        ));\n  }\n\n\n  render() {\n    const data = {...this.props.bcServiceData};\n\n    return ( \n      <>\n        {Object.entries(data).length===0?<NoData />:\"\"}\n        \n        {this.createMenuTree(data)}\n      </>\n\n     );\n  }\n}\n \nexport default ServiceSubMenus;","import React, { useState, useEffect } from 'react';\n\nimport SearchBox from '../tools/SearchBox';\n\nimport ServiceData from '../../js/ServiceData';\n\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport ServiceSubMenus from './ServiceSubMenus';\n\nfunction ServicesDDList(props) {\n\n  const [data, setData] = useState('Loading Service Catalog ...');\n  const [serviceDataObj] = useState(new ServiceData(data, setData));//don't need the setter for the ServiceData\n\n  // Passing the empty array as the second argument of\n  // useEffect() forces it to behave like componentDidMount()\n  // lifecyle method.\n  useEffect( \n    () => {\n      serviceDataObj.fetchServicesFromApi();\n      },\n    // Purists won't like this, but ...\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []);\n\n  //use context something like this ... console.log(\"working...\"+serviceCtx);\n\n  //to use a context do something like this in return ... <pre>--&gt;{serviceCtx}&lt;--</pre>\n  return (\n    <>\n\n        <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\">\n          <li className=\"bc-dropdown-li-search\"><SearchBox searchFunction={serviceDataObj.filterServiceInstancesByKeyword} /></li>\n          <li id=\"bc-dropdown-li\"><Dropdown.Divider /></li>\n          <ServiceSubMenus addBCService={props.addBCService} bcServiceData={data} />\n        </ul>\n\n        \n    </>\n  );\n}\n \nexport default ServicesDDList;","import { createContext} from 'react';\n\n// A great overview of Contexts used with Hooks was made by \"The Net Ninja\" at https://youtu.be/v1s_rbZbqQI\n// Another great one is by Boris Yordanov, \"Working with the REact Context API\" at https://www.toptal.com/react/react-context-api\n\nexport const BudgetContext = createContext(42);\n\nexport default BudgetContext;","import React, { Component } from 'react';\n\nimport Services from './ServicesDDList';\nimport BudgetContext from '../../contexts/BudgetContext';\n\n\n/**\n * This component is the guts of the Add Service. \n * A function for adding rows is provided from the BudgetContext.\n */\nclass ServiceCatalogDDMenu extends Component {\n  render() { \n    return (\n      <BudgetContext.Consumer>\n        {context => (\n          <Services addBCService = {(e, service) => context.addBCService(e, service)} />\n        )}\n      </BudgetContext.Consumer>\n     );\n  }\n}\n \nexport default ServiceCatalogDDMenu;","/**\n * Library of utility methods for use with the Budget Calculator.\n */\nclass BudgetUtils \n{\n  toDollars(dollars) {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2\n    }).format(dollars);\n  }\n\n  validateTotalCost(total) {\n    return isNaN(total) ? 0 : total;\n  }\n\n  /**\n   * For the clinical and non-clinical row components.\n   */\n  findYourRateByProps(props) {\n    return this.findYourRate(props.fundingType, props.federalrate, props.industryrate);\n  }\n\n  /**\n   * Used by BudgetProvider.addBCService().\n   */\n  findYourRate(fundingType, federalrate, industryrate) {\n    return (fundingType==='federal_rate') ? federalrate : industryrate;\n  }\n\n  /**\n   * Check if provided row is clinical.\n   */\n  isClinical(obj) {\n      return parseInt(obj.clinical);\n  }\n\n  /**\n   * Check if provided row is NOT clinical.\n   */\n  isNotClinical(obj) {\n      return (! parseInt(obj.clinical));\n  }\n}\n\nexport default BudgetUtils;","import * as jsPDF from 'jspdf';\nimport 'jspdf-autotable';\n\nimport BudgetUtils from '../js/BudgetUtils';\n\n\n/**\n * Tools for using jsPDF to download the current budget as (SURPRISE!!!) a PDF.\n * \n * The jsPDF library is an MIT Licensed project found at https://github.com/MrRio/jsPDF\n * The jsPDF-AutoTable library is an MIT Licensed project found \n * at https://github.com/simonbengtsson/jsPDF-AutoTable\n */\nclass DownloadPdf \n{\n  constructor ()\n  {\n    let bu = new BudgetUtils();\n    this.toDollars = bu.toDollars;\n    this.isClinical = bu.isClinical;\n    this.isNotClinical = bu.isNotClinical;\n\n    this.columnLookup = [\n            {title: 'Clinical Service', dataKey: 'service'},                    // 0\n            {title: 'Base Cost', dataKey: 'base_cost'},                         // 1\n            {title: 'Your Rate', dataKey: 'adjusted_rate'},                     // 2\n            {title: 'Subjects', dataKey: 'service_quantity'},                   // 3\n            {title: 'Quantity Type', dataKey: 'unit_label'},                    // 4\n            {title: 'Visits', dataKey: 'visit_count'},                          // 5\n            {title: 'Cost Per Subject', dataKey: 'cost_per_subject'},           // 6\n            {title: 'Total', dataKey: 'subtotal'}                               // 7\n        ];\n\n    this.clinicalHeaders = [[\n      'Clinical Service', \n      'Base Cost', \n      'Your Rate', \n      'Subjects', \n      'Quantity Type', \n      'Visits', \n      'Cost Per Subject', \n      'Total']];\n\n    this.nonClinicalHeaders = [[\n      'Non-Clinical Service', \n      'Base Cost', \n      'Your Rate', \n      'Quantity', \n      'Quantity Type', \n      'Total']];\n  }\n\n  /**\n   * Making a copy of the budgetState, then using the copy for creating the PDF.\n   */\n  savePdf(originalBudget) {\n    const budgetCopy = {...originalBudget}\n\n    let clinicalTotals = this.toDollars(budgetCopy.clinicalTotals);\n    let nonclinicalTotals = this.toDollars(budgetCopy.nonclinicalTotals);\n    let grandTotal = this.toDollars(budgetCopy.grandTotal);\n    let perService = budgetCopy.perService;\n\n    let rows = budgetCopy.bcrows;\n\n    // preparing data for the clinical table\n    let clinicalData = [];\n\n    Object.values(rows).filter(this.isClinical).forEach(obj => {\n      clinicalData.push(\n        [\n          obj.service,\n          this.toDollars(obj.industry_rate),\n          this.toDollars(obj.yourCost),\n          obj.subjectCount,\n          perService[obj.per_service],\n          obj.visitCount.filter(vc => {return vc;}).length,\n          this.toDollars(obj.costPerSubject),\n          this.toDollars(obj.totalCost)\n        ]);\n    });\n\n    clinicalData.push(['', '', '', '', '', '', 'Clinical Total:', clinicalTotals]);\n\n    //preparing data for the non-clinical table\n    let nonClinicalData = [];\n\n    Object.values(rows).filter(this.isNotClinical).forEach(obj => {\n      nonClinicalData.push(\n        [\n          obj.service,\n          this.toDollars(obj.industry_rate),\n          this.toDollars(obj.yourCost),\n          obj.quantity,\n          perService[obj.per_service],\n          this.toDollars(obj.totalCost)\n        ]);\n    });\n    \n    nonClinicalData.push(['','','','','Non-Clinical Total:', nonclinicalTotals]);\n\n    console.log(\"PDF will download .... soon.\",budgetCopy);\n\n    //creating the PDF\n    let doc = new jsPDF('l', 'pt');\n    // doc.autoTable(columnLookup, pdfFormattedRequest.clinical, {\n    doc.autoTable({\n      head:this.clinicalHeaders,\n      body:\n            clinicalData,\n            theme: 'striped',\n            margin: {top: 60}\n        });\n\n    doc.autoTable({\n      head:this.nonClinicalHeaders,\n      body:\n            nonClinicalData,\n            theme: 'striped',\n            margin: {top: 60},\n            startY: doc.autoTable.previous.finalY\n        });\n\n    doc.text('Grand Total: ' + grandTotal, 650, doc.autoTable.previous.finalY + 25);\n\n\n    // doc.autoTable(columnLookup, pdfFormattedRequest.clinical, {\n    //     theme: 'striped',\n    //     margin: {top: 60}\n    // });\n    // doc.text('Test worked!!', 10, 10);\n\n    doc.save('budget.pdf');\n  }\n\n  testDownloadWorking()\n  {\n    console.log(\"PDF will download .... soon.\");\n\n    // Default export is a4 paper, portrait, using milimeters for units\n    let doc = new jsPDF();\n    \n    doc.text('Test worked!!', 10, 10);\n    doc.save('a4.pdf');\n  }\n\n}\n\nexport default DownloadPdf;","import React, { Component } from 'react';\nimport ServiceCatalogDDMenu from '../servicecatalog/ServiceCatalogDDMenu';\n\nimport DownloadPdf from '../../js/DownloadPdf'\n\nclass BCNav extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showInfoCallback: this.props.showInfoCallback\n    };\n  }\n\n  handleEditBudgetInfoClick = () => {\n    this.state.showInfoCallback();\n  }\n\n  handleDownloadAsPdfClick = () => {\n    let downloader = new DownloadPdf();\n    downloader.savePdf(this.props.bcstate);\n  }\n\n  render() { \n    return (\n<nav className=\"navbar navbar-expand-sm\">\n  <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n    <ul className=\"navbar-nav\">\n      <li className=\"nav-item dropdown\">\n        <a className=\"nav-link dropdown-toggle\" href=\"#/\" id=\"navbarDropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n          Add Service\n        </a>\n        <ServiceCatalogDDMenu />\n      </li>\n      <li className=\"nav-item\">\n        <a className=\"nav-link btn btn-lg font-weight-bolder\" id=\"bdgtcalc-nav\" href=\"#/\" onClick={this.handleEditBudgetInfoClick}>Edit Budget Information</a>\n      </li>\n      <li className=\"nav-item\">\n        <a className=\"nav-link btn btn-lg font-weight-bolder\" id=\"bdgtcalc-nav\" href=\"#/\" onClick={this.handleDownloadAsPdfClick}>Download as PDF</a>\n      </li>\n\n    </ul>\n  </div>\n</nav>\n     );\n  }\n}\n\nexport default BCNav;\n","import React, { Component } from 'react';\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nclass BCSubmitModal extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showBCSubmit: props.showBCSubmit,\n      handleBCSubmitCallback: props.handleBCSubmitCallback,\n      handleBCSubmitHide: props.handleBCSubmitHide,\n      validated: false\n    }\n    this.budgetTitle = React.createRef();\n    this.username = React.createRef();\n    this.firstName = React.createRef();\n    this.lastName = React.createRef();\n    this.email = React.createRef();\n    this.irbNumber = React.createRef();\n  }\n\n  handleSaveConfirmSubmission = (e) => {\n    e.preventDefault();\n\n    //validate fields\n    this.setState({validated: true});\n\n    if (this.saveSubmissionForm.checkValidity()) {\n      //save state\n      this.state.handleBCSubmitCallback(\n        {\n          budgetTitle: this.budgetTitle.current.value,\n          username: this.username.current.value,\n          firstName: this.firstName.current.value,\n          lastName: this.lastName.current.value,\n          email: this.email.current.value,\n          irbNumber: this.irbNumber.current.value,\n        } );\n      this.setState({showBCSubmit: false});\n\n      //hide the modal\n      this.state.handleBCSubmitHide();\n    }\n\n  };\n\n\n  handleClose = (e) => {\n    // If called from the closeButton, you won't have an 'e'\n    // Otherwise, you will have 'e' from the Close button\n    if (e) {\n      e.preventDefault();\n    }\n    this.state.handleBCSubmitHide();\n  }\n\n  render() {\n    return ( \n      <Modal id=\"submitModal\" centered show={this.props.showBCSubmit} onHide={this.handleClose} role=\"dialog\" aria-labelledby=\"submitModal\" aria-hidden=\"true\">\n        <div role=\"document\">\n          <Modal.Header closeButton>\n            <Modal.Title>Confirm Submission</Modal.Title>\n          </Modal.Header>\n            <Modal.Body>\n              <div>\n                <p>We require some additional information before your request can be submitted.</p>\n              </div>\n              <Form id=\"submissionForm\" ref={form => this.saveSubmissionForm = form} onSubmit={this.handleSaveConfirmSubmission} validated={this.state.validated} >\n                <Form.Row>\n                  <Form.Label htmlFor=\"userTitleInputSubmit\">\n                    <b>Budget Title (for future reference):</b>\n                  </Form.Label>\n                  <Form.Control type=\"text\" ref={this.budgetTitle} id=\"userTitleInputSubmit\" name=\"userTitleInputSubmit\" className=\"info-field\" />\n                </Form.Row>\n                <Form.Row>\n                  <Form.Group className=\"requester-info\">\n                    <Form.Label htmlFor=\"username\">\n                      <b>Username</b>\n                    </Form.Label>\n                    <Form.Control type=\"text\" ref={this.username} id=\"username\" name=\"username\" className=\"info-field\" />\n                  </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                  <Form.Group className=\"requester-info\">\n                    <Form.Label htmlFor=\"first_name\">\n                      <b>First Name</b>\n                    </Form.Label>\n                    <Form.Control type=\"text\" ref={this.firstName} id=\"first_name\" name=\"first_name\" className=\"info-field\" />\n                  </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                  <Form.Group className=\"requester-info\">\n                    <Form.Label htmlFor=\"last_name\">\n                      <b>Last Name</b>\n                    </Form.Label>\n                    <Form.Control type=\"text\" ref={this.lastName} id=\"last_name\" name=\"last_name\" className=\"info-field\" />\n                  </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                  <Form.Group className=\"requester-info\">\n                    <Form.Label htmlFor=\"email\">\n                      <b>Email</b>\n                    </Form.Label>\n                    <Form.Control type=\"email\" ref={this.email} id=\"email\" name=\"email\" className=\"info-field\" />\n                    <Form.Control.Feedback type=\"invalid\">\n                      Any text in this field must be a valid email.\n                    </Form.Control.Feedback>\n                  </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                  <Form.Group className=\"requester-info\">\n                    <Form.Label htmlFor=\"irb\">\n                      <b>IRB Number</b>\n                    </Form.Label>\n                    <Form.Control type=\"input\" pattern=\".+\" ref={this.irbNumber} id=\"irb\" name=\"irb\" className=\"info-field\" required />\n                    <Form.Control.Feedback type=\"invalid\">\n                      This field is required.\n                    </Form.Control.Feedback>\n                  </Form.Group>\n                </Form.Row>\n                <input type=\"hidden\" name=\"redcap_csrf_token\" value=\"\" />\n              </Form>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button id=\"cancelSaveBtn\" variant=\"secondary\" onClick={this.handleClose} >Back</Button>\n              <Button id=\"confirmSaveBtn\" variant=\"primary\" type=\"submit\" onClick={this.handleSaveConfirmSubmission}>Save</Button>\n            </Modal.Footer>\n        </div>\n      </Modal>\n     );\n  }\n}\n \nexport default BCSubmitModal;","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from \"react-bootstrap/Modal\";\n\nclass BCSubmitSuccessModal extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showSubmitSuccess: props.showSubmitSuccess,\n      submitSuccessCallback: props.submitSuccessCallback\n    }\n  }\n\n  handleClose = (e) => {\n    // If called from the closeButton, you won't have an 'e'\n    // Otherwise, you will have 'e' from the Close button\n    if (e) {\n      e.preventDefault();\n    }\n    this.state.submitSuccessCallback();\n  }\n\n  render() { \n    return ( \n      <Modal id=\"submitSuccessModal\" centered show={this.props.showSubmitSuccess} onHide={this.handleClose} role=\"dialog\" aria-labelledby=\"submitSuccessModal\" aria-hidden=\"true\">\n        <div role=\"document\">\n          <Modal.Header closeButton>\n            <Modal.Title>Submitted</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n              Success!\n          </Modal.Body>\n          <Modal.Footer className=\"modal-footer\">\n              <Button variant=\"secondary\" onClick={ this.handleClose}>Close</Button>\n          </Modal.Footer>\n        </div>\n    </Modal>\n     );\n  }\n}\n \nexport default BCSubmitSuccessModal;","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\nclass TrashIcon extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {  }\n  }\n  render() { \n    return ( \n      <FontAwesomeIcon icon={faTrash} size='lg' color='red' />\n     );\n  }\n}\n \nexport default TrashIcon;","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons'\n\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\nimport Popover from 'react-bootstrap/Popover'\n\n\nclass InfoCircleIcon extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {  }\n  }\n  render() { \n    return ( \n      <OverlayTrigger\n            placement=\"right\"\n            delay={{ show: 250, hide: 400 }}\n            overlay={<Popover id={`popover-positioned-right`}>\n          <Popover.Content>\n            {this.props.description}\n          </Popover.Content>\n        </Popover>}\n          ><FontAwesomeIcon icon={faInfoCircle} color='#3E72A8' /></OverlayTrigger>\n     );\n  }\n}\n \nexport default InfoCircleIcon;","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\n\nclass TimesIcon extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {  }\n  }\n  render() { \n    return ( \n      <FontAwesomeIcon icon={faTimes} />\n     );\n  }\n}\n \nexport default TimesIcon;","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\n\nclass CheckIcon extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {  }\n  }\n  render() { \n    return ( \n      <FontAwesomeIcon icon={faCheck} />\n     );\n  }\n}\n \nexport default CheckIcon;","import React, { Component } from 'react';\n\nimport TrashIcon from '../components/budgetcalculator/icons/TrashIcon';\nimport InfoCircleIcon from '../components/budgetcalculator/icons/InfoCircleIcon';\n\nimport Button from 'react-bootstrap/Button';\nimport TimesIcon from '../components/budgetcalculator/icons/TimesIcon';\nimport CheckIcon from '../components/budgetcalculator/icons/CheckIcon';\nimport Form from 'react-bootstrap/Form';\n\nimport BudgetUtils from '../js/BudgetUtils';\n\nclass ClinicalRow extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: props.id\n    }\n\n    let bu = new BudgetUtils();\n    this.toDollars = bu.toDollars;\n  }\n\n  handleTrash = (e) => {\n    e.persist();\n    this.props.removeBCService(e, this.props.id)\n  }\n\n  handleSubjectCountChange = event => {\n\n    event.persist();\n    this.props.csUpdateSubjectCountById(event, this.state.id);\n  }\n\n  chooseCheckboxType = (index, visitIndex, visitCount) => {//populate based off the context bcrow[<id>].visitCount\n\n    //first, check to see if the current checkbox falls in the range of visits count, otherwise display a space instead of a checkbox\n    if ((visitIndex + index) <= visitCount) {\n      let checkOrNotCheck = [];\n      let isChecked = false;\n\n      let checkedStatusIndex = visitIndex + index - 1;\n\n      try {\n        if (\n          (typeof this.props.bcrows !== 'undefined') && \n          (typeof this.props.bcrows[this.state.id] !== 'undefined') && \n          (typeof this.props.bcrows[this.state.id].visitCount !== 'undefined') ) {\n          isChecked = this.props.bcrows[this.state.id].visitCount[checkedStatusIndex];\n        }\n      } catch(error) {\n        console.log(error);\n      }\n\n      if (isChecked) {\n        checkOrNotCheck.push(<Form.Check \n        key={index} \n        className=\"visit-checkbox\" \n        checked={true} \n        onChange={() => this.props.csVisitChanged(this.state.id, checkedStatusIndex, false)}\n        />);\n      }\n      else {\n        checkOrNotCheck.push(<Form.Check \n        key={index} \n        className=\"visit-checkbox\" \n        checked={false} \n        onChange={() => this.props.csVisitChanged(this.state.id, checkedStatusIndex, true)} />);\n      }\n      return checkOrNotCheck;\n    } \n    else {\n      return ' ';\n    }\n  }\n\n  getCheckboxes = (visitIndex, visitCount) => {\n    let cells = [];\n    for (let i=0; i<5; i++) {\n      cells.push(\n        <td key={i} className=\"visit-column\">\n          {this.chooseCheckboxType(i, visitIndex, visitCount)}\n        </td>\n      );\n    }\n    return cells;\n  }\n\n  handleVisitButton = (select) =>{\n    //For speed, only set the checkbox state if it is different than requested\n    //      this prevents wasted cycles re-checking the column buttons' state\n    //TODO: Optimization bonus points, ... only update the row button view when all \n    //      the visits have been changed\n    this.props.handleVisitRowButtonClicked(this.state.id, select);\n  }\n\n  getCheckButton = () => {\n    if (this.props.anyVistsNotSelected) {\n      return (<Button variant=\"success\" className=\"check-row-button\" style={{width: '40px'}} onClick={()=>{this.handleVisitButton(true)}}><CheckIcon /></Button>);//TODO: add onClicked\n    }\n    else {\n      return (<Button variant=\"danger\" className=\"check-row-button\" style={{width: '40px'}} onClick={()=>{this.handleVisitButton(false)}}><TimesIcon /></Button>);//TODO: add onClicked\n    }\n  }\n\n  render() { \n    return ( \n      <tr className=\"service-line-item\" onInput={this.handleUpdateTotals}>\n          <td style={{borderRightStyle:'hidden'}}> <span> <button className=\"delete btn btn-link\" title=\"Delete\" data-toggle=\"tooltip\" onClick={this.handleTrash}><TrashIcon /></button> </span> </td>\n          <td className=\"service-title\"> <small>{this.props.core} &gt; {this.props.category} </small> <br /><span> {this.props.service} </span> <InfoCircleIcon description={this.props.description} /> </td>\n          <td className=\"base-cost\">{this.toDollars(this.props.industryrate)}</td>\n          <td className=\"your-cost\">{this.toDollars(this.props.yourCost)}</td>\n          <td>\n              <input className=\"qty-count\" type=\"number\" min=\"1\" value={this.props.subjectCount} onChange={this.handleSubjectCountChange} />\n          </td>\n          <td>{this.props.perServiceReadable[this.props.perService]}</td>\n          <td className=\"allVisits\">\n              {this.getCheckButton()}\n          </td>\n          {this.getCheckboxes(this.props.chsVisitIndex, this.props.bcimShowInfoVisitCount)}\n          <td className=\"line-total-per-patient\">{this.toDollars(this.props.costPerSubject)}</td>\n          <td className=\"line-total\">{this.toDollars(this.props.totalCost)}</td>\n      </tr>\n     );\n  }\n}\n \nexport default ClinicalRow;","import React, {Component} from 'react';\nimport BudgetContext from './BudgetContext';\nimport ClinicalRow from './ClinicalRow';\nimport BCInfoModal from '../components/budgetcalculator/BCInfoModal';\n\nimport BudgetUtils from '../js/BudgetUtils';\n\n\nclass BudgetClinicalRowsConsumer extends Component {\n  constructor(props) {\n    super(props);\n    let bu = new BudgetUtils();\n    this.isClinical = bu.isClinical;\n  }\n\n  displayRows = rows => {\n    \n    if (rows > 0) {\n        return;\n    }\n\n    return (\n        <tr id=\"clinicalEmpty\">\n            <td colSpan=\"14\">No services added</td>\n        </tr>\n    );\n  }\n\n  render() { \n    return ( \n      <BudgetContext.Consumer>\n          {context => (\n              <>\n                  {\n                    this.displayRows( Object.values(context.bcrows).filter(this.isClinical).length )\n                  }\n\n                  {Object.values(context.bcrows).filter(this.isClinical).map(obj => (\n                      <ClinicalRow\n                          key={obj.key}\n                          id={obj.id}\n                          core={obj.core}\n                          category={obj.category}\n                          service={obj.service}\n                          description={obj.service_description}\n                          industryrate={obj.industry_rate}\n                          yourCost={obj.yourCost}\n                          federalrate={obj.federal_rate}\n                          clinical={obj.clinical}\n                          removeBCService={context.removeBCService}\n                          fundingType={context.fundingType}\n                          subjectCount={obj.subjectCount}\n                          visitCount={obj.visitCount}\n                          anyVistsNotSelected={obj.anyVistsNotSelected}\n                          costPerSubject={obj.costPerSubject}\n                          totalCost={obj.totalCost}\n                          perService={obj.per_service}\n\n                          bcrows={context.bcrows}\n                          csUpdateSubjectCountById={context.csUpdateSubjectCountById}\n                          chsVisitIndex={context.chsVisitIndex}\n                          bcimShowInfoVisitCount={context.bcimShowInfoVisitCount}\n                          csVisitChanged={context.csVisitChanged}\n                          handleVisitRowButtonClicked={context.handleVisitRowButtonClicked}\n                          perServiceReadable={context.perService}\n                      />\n                  ))}\n\n                <BCInfoModal\n                    showInfo={context.bcimShowInfo}\n                    showInfoSubjectCount={context.bcimShowInfoSubjectCount}\n                    showInfoVisitCount={context.bcimShowInfoVisitCount}\n                    infoCallback={context.bcimInfoCallback}\n                    hideInfoCallback={context.bcimHandleHideInfo} />\n              </>\n          )}\n      </BudgetContext.Consumer>\n     );\n  }\n}\n \nexport default BudgetClinicalRowsConsumer;","import React, { Component } from 'react';\nimport TrashIcon from '../components/budgetcalculator/icons/TrashIcon';\nimport InfoCircleIcon from '../components/budgetcalculator/icons/InfoCircleIcon';\nimport BudgetUtils from '../js/BudgetUtils';\n\nclass NonClinicalRow extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: props.id\n    }\n\n    let bu = new BudgetUtils();\n    this.toDollars = bu.toDollars;\n    this.validateTotalCost = bu.validateTotalCost;\n  }\n\n  handleTrash = (e) => {\n    e.persist();\n    this.props.removeBCService(e, this.props.id);\n  }\n\n  handleQtyCountChange = event => {\n    event.persist();\n    this.props.handleQtyCountChange(this.state.id, event.target.value);\n  }\n\n  render() { \n    return ( \n      <tr className=\"service-line-item\" onInput={this.handleUpdateTotals}>\n        <td style={{borderRightStyle:'hidden'}}> <span> <button className=\"delete btn btn-link\" title=\"Delete\" data-toggle=\"tooltip\" onClick={this.handleTrash}><TrashIcon /></button> </span> </td>\n        <td className=\"service-title\"> <small>{this.props.core} &gt; {this.props.category} </small> <br /><span> {this.props.service} </span> <InfoCircleIcon description={this.props.description} /> </td>\n        <td className=\"base-cost\">{this.toDollars(this.props.industryrate)}</td>\n        <td className=\"your-cost\">{this.toDollars(this.props.yourCost)}  </td>\n        <td>\n            <input className=\"qty-count\" type=\"number\" min=\"1\" value={this.props.quantity} onChange={this.handleQtyCountChange}/>\n        </td>\n        <td>{this.props.perServiceReadable[this.props.perService]}</td>\n        <td className=\"non_clinical-blank\" colSpan=\"7\"></td>\n        <td className=\"line-total\">{this.toDollars(this.props.totalCost)}</td>\n      </tr>\n\n     );\n  }\n}\n \nexport default NonClinicalRow;","import React, {Component} from 'react';\nimport BudgetContext from './BudgetContext';\nimport NonClinicalRow from './NonClinicalRow';\n\nclass BudgetNONClinicalRowsConsumer extends Component {\n\n  isNonClinical = obj => {\n      return parseInt(obj.clinical) === 0;\n  }\n\n  displayRows = rows => {\n    \n    if (rows > 0) {\n        return;\n    }\n\n    return (\n        <tr id=\"clinicalEmpty\">\n  <td colSpan=\"14\">No services added</td>\n        </tr>\n    );\n  }\n\n  render() { \n    return ( \n      <BudgetContext.Consumer>\n          {context => (\n              <>\n                  {\n                    this.displayRows( Object.values(context.bcrows).filter(this.isNonClinical).length )\n                  }\n\n                  {Object.values(context.bcrows).filter(this.isNonClinical).map(obj => (\n                      <NonClinicalRow\n                          key={obj.key}\n                          id={obj.id}\n                          core={obj.core}\n                          category={obj.category}\n                          service={obj.service}\n                          description={obj.service_description}\n                          industryrate={obj.industry_rate}\n                          federalrate={obj.federal_rate}\n                          clinical={obj.clinical}\n                          totalCost={obj.totalCost}\n                          yourCost={obj.yourCost}\n                          quantity={obj.quantity}\n                          perService={obj.per_service}\n\n                          removeBCService={context.removeBCService}\n                          fundingType={context.fundingType}\n\n                          handleQtyCountChange={context.handleQtyCountChange}\n\n                          addNonclinicalCost={context.addNonclinicalCost}\n                          removeNonclinicalCost={context.removeNonclinicalCost}\n                          perServiceReadable={context.perService}\n                      />\n                  ))}\n              </>\n          )}\n      </BudgetContext.Consumer>\n     );\n  }\n}\n \nexport default BudgetNONClinicalRowsConsumer;","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMinus } from '@fortawesome/free-solid-svg-icons'\n\nclass MinusIcon extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {  }\n  }\n  render() { \n    return ( \n      <FontAwesomeIcon icon={faMinus} />\n     );\n  }\n}\n \nexport default MinusIcon;","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\n\nclass ArrowLeft extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {  }\n  }\n  render() { \n    return ( \n      <FontAwesomeIcon icon={faArrowLeft} />\n     );\n  }\n}\n \nexport default ArrowLeft;","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons'\n\nclass ArrowRight extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {  }\n  }\n  render() { \n    return ( \n      <FontAwesomeIcon icon={faArrowRight} />\n     );\n  }\n}\n \nexport default ArrowRight;","import React, { Component } from 'react';\n\nimport BudgetContext from '../../contexts/BudgetContext';\n\nimport TimesIcon from './icons/TimesIcon';\nimport MinusIcon from './icons/MinusIcon';\nimport CheckIcon from './icons/CheckIcon';\nimport ArrowLeftIcon from './icons/ArrowLeftIcon';\nimport ArrowRightIcon from './icons/ArrowRightIcon';\n\nimport Button from 'react-bootstrap/Button';\n\n/**\n * State for this component must be kept in the BudgetProvider (context),\n * because is needs to be modified based off the state of the clinical service rows.\n */\nclass BCClincalHeader extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {  }\n  }\n\n  getColumButtons = (buttonStates, callback) => {\n    let retval = [];\n    let rowCount = buttonStates.length;\n\n    let variant;// \"success\", \"secondary\" or \"danger\"\n    let disabled;\n    let icon;//<CheckIcon />, <TimesIcon /> or <MinusIcon />\n\n    for (let i=0; i<rowCount; i++) {\n      if (buttonStates[i] === \"select\") {\n        variant = \"success\";\n        disabled = false;\n        icon = <CheckIcon />;\n      }\n      else if (buttonStates[i] === \"deselect\") {\n        variant = \"danger\";\n        disabled = false;\n        icon = <TimesIcon />;\n      }\n      else if (buttonStates[i] === \"disabled\") {\n        variant = \"secondary\";\n        disabled = true;\n        icon = <MinusIcon />;\n      }\n      retval.push(<td key={i}><Button \n      variant={variant} \n      disabled={disabled} \n      className=\"check-column-button\" \n      style={{width: '40px'}} \n      onClick={()=>{callback(i,buttonStates[i]);}}>{icon}</Button></td>);\n    }\n    \n    return retval;\n  }\n\n  getColumNumbers = (baseIndex, maxIndex) => {\n    let retval = [];\n    let rowCount = 5;\n\n    for (let i=0; i<rowCount; i++) {\n      retval.push(<td key={i}><b className=\"visit-header\">{((baseIndex + i) <= maxIndex) ? (baseIndex + i) : ' '}</b></td>);\n    }\n    \n    return retval;\n  }\n\n  render() { \n    return ( \n      <BudgetContext.Consumer>\n          {context => (\n              <>\n                <tr className=\"clinicalHeaders\">\n                  <th rowSpan=\"3\" style={{borderRightStyle: 'hidden', width: '3%'}}> </th>\n                  <th rowSpan=\"3\" style={{width: '25%'}}> Clinical Service </th>\n                  <th rowSpan=\"3\"> Base Cost </th>\n                  <th rowSpan=\"3\"> Your Cost </th>\n                  <th rowSpan=\"3\"> Subjects </th>\n                  <th rowSpan=\"3\"> Quantity Type </th>\n                  <th className=\"hide-border\">\n                      <div>\n                        <Button variant=\"primary\" disabled={context.chsLeftNavState === 'disabled' ? true : false} onClick={context.cshNavLeft}><ArrowLeftIcon /></Button>\n                      </div>\n                  </th>\n                  <th className=\"hide-border\" colSpan=\"4\">Visits</th>\n                  <th className=\"hide-border\">\n                      <div>\n                        <Button variant=\"primary\" disabled={context.chsRightNavState === 'disabled' ? true : false} onClick={context.cshNavRight}><ArrowRightIcon /></Button>\n                      </div>\n                  </th>\n                  <th rowSpan=\"3\"> Cost Per Subject </th>\n                  <th rowSpan=\"3\" style={{width: '10%'}}> Total Cost </th>\n                </tr>\n                <tr className=\"visit-header-row\">\n                    <td rowSpan=\"2\"></td>\n                    {this.getColumNumbers(context.chsVisitIndex, context.bcimShowInfoVisitCount)}\n                </tr>\n                <tr>\n                    {this.getColumButtons(context.chsBtnStates, context.cshButtonClicked)}\n                </tr>\n              </>\n          )}\n      </BudgetContext.Consumer>\n     );\n  }\n}\n \nexport default BCClincalHeader;","import React, {Component} from 'react';\nimport BudgetContext from './BudgetContext';\n\nimport BudgetUtils from '../js/BudgetUtils';\n\nclass BudgetTotal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n\n    let bu = new BudgetUtils();\n    this.toDollars = bu.toDollars;\n  }\n\n  render() { \n    return ( \n      <BudgetContext.Consumer>\n          {context => (\n              <>\n                  {this.props.grand ? this.toDollars(context.grandTotal) : ''}\n                  {this.props.clinical ? this.toDollars(context.clinicalTotals) : ''}\n                  {this.props.nonclinical ? this.toDollars(context.nonclinicalTotals) : ''}\n              </>\n          )}\n      </BudgetContext.Consumer>\n     );\n  }\n}\n \nexport default BudgetTotal;","import React, { Component } from 'react';\n\nimport BCSubmitModal from './BCSubmitModal';\nimport BCSubmitSuccessModal from './BCSubmitSuccessModal';\n\n// import Button from \"react-bootstrap/Button\";\n\nimport BudgetClinicalRowsConsumer from '../../contexts/BudgetConsumerClinicalRows';\nimport BudgetNONClinicalRowsConsumer from '../../contexts/BudgetNONClinicalRowsConsumer';\nimport BCClincalHeader from './BCClincalHeader';\n\nimport BudgetTotal from '../../contexts/BudgetTotal';\n\n\nclass BCServicesTable extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showSubmitSuccess:false,\n      showBCSubmit: false\n    }\n  }\n\n\n  //callback from the submit success modal\n  submitSuccessCallback = () => {\n    this.setState({showSubmitSuccess: false})\n  }\n\n\n  /////////////////////////////////////\n  //BEGIN: submit button modal methods\n\n  handleBCSubmitHide = () => this.setState({showBCSubmit: false});\n\n  handleBCSubmitCallback = (values) => {\n    //TODO: finish this method\n    console.log(\n      \"handleBCSubmitCallback ... budgetTitle: \" + values.budgetTitle + \"; \" +\n      \"username: \" + values.username + \"; \" +\n      \"firstName: \" + values.firstName + \"; \" +\n      \"lastName: \" + values.lastName + \"; \" +\n      \"email: \" + values.email + \"; \" +\n      \"irbNumber: \" + values.irbNumber\n    );\n  }\n\n  handleSubmitButtonClick = (e) => {\n    this.setState({showBCSubmit:true});\n  }\n\n  //END: submit button modal methods\n  /////////////////////////////////////\n\n\n\n  handleSubjectsChange = (e) =>  {\n    e.preventDefault();\n    this.state.myCallback(this.textInput.current.value);\n    this.state.myHide();\n  }\n\n\n\n\n  //\"UIOWA_BudgetCalculator.updateTotals()\"\n  handleUpdateTotals = (e) =>  {\n    e.preventDefault();\n    this.state.myCallback(this.textInput.current.value);\n    this.state.myHide();\n  }\n\n  handleQtyCountChange = (e) =>  {\n    e.preventDefault();\n    this.state.myCallback(this.textInput.current.value);\n    this.state.myHide();\n  }\n\n  //\"UIOWA_BudgetCalculator.updateTotals()\"\n  handleUpdateTotals = (e) =>  {\n    e.preventDefault();\n    this.state.myCallback(this.textInput.current.value);\n    this.state.myHide();\n  }\n\n\n  render() {\n    return ( \n      <div>\n                        <table id=\"servicesTable\" className=\"table table-bordered table-striped\">\n                            <tbody>\n            <BCClincalHeader />\n                            </tbody>\n                            <tbody id=\"clinical\">\n            <BudgetClinicalRowsConsumer />\n                            </tbody>\n                            <tbody>\n                                <tr className=\"bg-secondary text-white\">\n                                    <td colSpan=\"13\" style={{textAlign: 'right', borderRightStyle:'hidden'}}>Clinical Total:</td>\n                                    <td id=\"clinicalTotal\"><BudgetTotal clinical /></td>\n                                </tr>\n                                <tr className=\"nonClinicalHeaders\">\n                                    <th style={{borderRightStyle:'hidden', width: '3%'}}> </th>\n                                    <th style={{width: '25%'}}>\n                    Non-Clinical Service </th>\n                                    <th>\n                    Base Cost </th>\n                                    <th>\n                    Your Cost </th>\n                                    <th>\n                    Quantity </th>\n                                    <th>\n                    Quantity Type </th>\n                                    <th colSpan=\"7\"> </th>\n                                    <th>\n                    Total Cost </th>\n                                </tr>\n                            </tbody>\n                            <tbody id=\"non_clinical\">\n            <BudgetNONClinicalRowsConsumer />\n                            </tbody>\n                            <tbody>\n                                <tr className=\"bg-secondary text-white\">\n                                    <td colSpan=\"13\" style={{textAlign: 'right', borderRightStyle:'hidden'}}>Non-Clinical Total:</td>\n                                    <td id=\"non_clinicalTotal\"><BudgetTotal nonclinical /></td>\n                                </tr>\n                                <tr className=\"total-row\">\n                                    <td className=\"total-header\" colSpan=\"13\" style={{textAlign: 'right', borderRightStyle:'hidden'}}>Grand Total:</td>\n                                    <td className=\"total\"><BudgetTotal grand /></td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <form id=\"dirtyCheck\" name=\"dirtyCheck\" onSubmit={this.handleSubmit} className=\"dirty\">\n                            <input type=\"hidden\" name=\"redcap_csrf_token\" value=\"\" />\n                        </form>\n                        <div className=\"action-button\">\n                            {/* <Button type=\"submit\" variant=\"success\" id=\"submit\" onClick={this.handleSubmitButtonClick}>Submit</Button> */}\n                        </div>\n\n                        <BCSubmitModal showBCSubmit={this.state.showBCSubmit} handleBCSubmitCallback={this.handleBCSubmitCallback} handleBCSubmitHide={this.handleBCSubmitHide} />\n\n                        <BCSubmitSuccessModal showSubmitSuccess={this.state.showSubmitSuccess} submitSuccessCallback={this.submitSuccessCallback} />\n\n                    </div>\n     );\n  }\n}\n \nexport default BCServicesTable;","import React, { Component } from 'react';\n\nimport './css/bc_custom.css';\nimport './css/bc_custom_2020.scss';\n\nimport BCJumbotron from './BCJumbotron';\nimport BCInfoModal from './BCInfoModal';\nimport BCSaveModal from './BCSaveModal';\n\nimport BCNav from './BCNav';\nimport BCServicesTable from './BCServicesTable';\n\nclass BudgetCalculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showInfo: false,\n      showSave: false,\n      showInfoSubjectCount: \"\",\n      showInfoVisitCount: \"\"\n    }\n  }\n\n  handleHideInfo = () => this.setState({showInfo: false});\n\n  showInfoCallback = () => {\n    console.log(\"edit handled... setting state\");\n    this.setState({showInfo: true});\n  }\n\n  submitSaveCallback = (values) => {\n    console.log(\"submitSaveCallback ... budget title: \" + values.budgetTitle);\n    this.setState({showSave: true});\n  }\n\n  handleHideSave = () => this.setState({showSave: false});\n\n  showSubmitCallback = () => {\n    console.log(\"edit hide submit handled... setting state\");\n    this.setState({showSubmit: true});\n  }\n\n  infoCallback = (values) => {\n    //TODO: finish this method\n    console.log(\"infoCallback ... Subject Count: \" + values.subjectCount + \"; Subject Count: \" + values.visitCount);\n    this.setState({showInfo: false, showInfoSubjectCount:values.subjectCount, showInfoVisitCount:values.visitCount})\n  }\n\n  handleHideWelcome = () => this.setState({showWelcome: false});\n\n  render() { \n    return ( \n      <div id=\"pagecontainer\" className=\"container-fluid\" role=\"main\">\n        <div id=\"container\">\n          <div id=\"pagecontent\">\n            <BCJumbotron />\n            <br />\n            <br />\n            <BCInfoModal\n              showInfo={this.state.showInfo}\n              showInfoSubjectCount={this.state.showInfoSubjectCount}\n              showInfoVisitCount={this.state.showInfoVisitCount}\n              infoCallback={this.infoCallback}\n              hideInfoCallback={this.handleHideInfo} />\n\n            <BCSaveModal\n              showSave={this.state.showSave}\n              submitSaveCallback={this.submitSaveCallback}\n              handleHideSave={this.handleHideSave} />\n\n            <BCNav \n              showInfoCallback={this.showInfoCallback}  \n              bcstate={this.props.bcstate}/>\n            <br />\n            <br />\n\n            <BCServicesTable />\n\n            <div id=\"disclaimer\">\n              This is a work in progress and not representative of the final product. Pricing data is for testing purposes only.\n            </div>\n          </div>\n        </div>\n      </div>\n      );\n  }\n}\n \nexport default BudgetCalculator;\n","import { bcConfig } from './config.js';\n\nclass PerServiceData {\n  constructor() {\n    this.fetchPerServicesFromApi = this.fetchPerServicesFromApi.bind(this);\n  }\n\n  //side effect of setting state in component's state passed into constructor\n  fetchPerServicesFromApi(setPerService)\n  {\n    //all paths are configurable in 'config.js'\n    const perServiceAPI = bcConfig.urlBase + bcConfig.urlPathToREDCap + bcConfig.perServiceAPI;\n\n    fetch(perServiceAPI)\n      .then(response => response.json())\n      .then(perService => {\n        setPerService(perService);\n      }).catch(err => console.log(err));\n  }\n\n}\n\nexport default PerServiceData;","import React, {Component} from 'react';\nimport BudgetContext from './BudgetContext';\n\nimport BudgetUtils from '../js/BudgetUtils';\nimport PerServiceData from '../js/PerServiceData';\n\nclass BudgetProvider extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n        bcInfoModalUsedOnce: false,\n        bcimShowInfo: false,\n        bcimShowSave: false,\n        bcimShowInfoSubjectCount: 0, // The info modal populates this field.\n        bcimShowInfoVisitCount: 0, // Number of columns of visits that can be selected. The info modal populates this field.\n        bcInfoModalNeeded: false, // when needed, the ID of the row that needs the info is populated in this attribute.\n\n        fundingType: '', // Determines the \"Your Cost\" column. Set by the BCWelcomeModal.\n        bcrows: {}, // All clinical and non-clinical rows for virtual DOM to display. Authoritative row state **SHOULD BE** preserved here, and not in the row components.\n        \n        // nonclinicalRowsTotal: {}, // calculated totals associated with rows' ID //TODO: Old design. Planning to refactor into bcrows\n        // clinicalRowsTotal: {}, // calculated totals associated with rows' ID //TODO: Old design. Planning to refactor into bcrows\n\n        nonclinicalTotals: 0, // for display in UI\n        clinicalTotals: 0, // for display in UI\n        grandTotal: 0, // for display in UI\n\n        chsLeftNavState: 'disabled', //nav states, ... 'active' and 'disabled'\n        chsRightNavState: 'disabled',\n        chsBtnStates: ['disabled','disabled','disabled','disabled','disabled'], //button states, ... 'select', 'deselect' and 'disabled'\n        chsVisitIndex: 1, // Current index being display (the visit page we're on). Base index is 1, not 0. Changes in increments of 5\n\n        perService: {} // human readable quantity types\n      }\n\n    this.perServiceData = new PerServiceData();\n    this.perServiceData.fetchPerServicesFromApi(this.psdSetPerService);\n\n    let bu = new BudgetUtils();\n    this.isClinical = bu.isClinical;\n    this.isNotClinical = bu.isNotClinical;\n  }\n\n  //////////////////////////////////////////\n  //\n  // BEGIN: Per Service Data\n\n  psdSetPerService = (perServiceArray) => {\n    this.setState((state, props) =>{\n      return {perService:perServiceArray};\n    });\n  }\n\n  // END:  Per Service Data\n  //\n  //////////////////////////////////////////\n\n\n  //////////////////////////////////////////\n  //\n  // BEGIN: Clinical Services Header Context (CSH)\n\n  cshNavLeft = () => {\n    this.setState((state, props)=>{\n\n      let visitIndex = state.chsVisitIndex;\n      visitIndex = visitIndex-5;\n      return {chsVisitIndex:visitIndex};\n\n    },\n    this.csHeaderUpdate);\n  }\n\n  cshNavRight = () => {\n    this.setState((state, props)=>{\n      let visitIndex = state.chsVisitIndex;\n      visitIndex = visitIndex+5;\n\n      return {chsVisitIndex:visitIndex};\n    },\n    this.csHeaderUpdate);\n\n  }\n\n  /**\n   * Five displayed buttons in the clinical services header.\n   * The first is 1 and the 5th is 5, ... not 0 based.\n   */\n  cshButtonClicked = (btnIndex, buttonState) => {\n\n    let newVisitState = false;\n\n    if (buttonState === \"select\") {\n      newVisitState = true;\n    }\n\n    this.setState((state,props)=>{\n      let columnIndex = state.chsVisitIndex+btnIndex-1;\n\n      let bcrowsCopy = {...state.bcrows};\n      Object.values(bcrowsCopy).filter(this.isClinical).forEach(obj => {\n\n        bcrowsCopy[obj.id].visitCount[columnIndex] = newVisitState;\n\n        //check if row button needs updating and update it\n        bcrowsCopy[obj.id].anyVistsNotSelected = (obj.visitCount.filter(v=>(!v)).length > 0);\n      });\n\n      return { bcrows:bcrowsCopy };\n    }, \n    ()=>{this.csHeaderUpdate();});//update header check buttons and update row check button *AND* totals.\n  }\n\n  // END:  Clinical Services Header Context\n  //\n  //////////////////////////////////////////\n\n\n\n\n  //////////////////////////////////////////\n  //\n  // BEGIN: Clinical Services (CS) section\n\n  cshSubjectsAndVisitsNeeded = (id) => {\n    this.setState({\n      bcInfoModalUsedOnce:true,\n      bcimShowInfo:true,\n      bcInfoModalNeeded:id\n      });\n  }\n  \n  /**\n   * This method should only be called once, just after the creation of the\n   * first clinical service row.\n   */\n  bcimInfoCallback = (values) => {\n    this.setState({\n      bcimShowInfo: false, \n      bcimShowInfoSubjectCount:values.subjectCount, \n      bcimShowInfoVisitCount:values.visitCount\n      }, ()=>{this.bcimUpdateAllSubjectCountsAndVisitCounts( values.subjectCount, values.visitCount);});\n  }\n\n  bcimHandleHideInfo = () => this.setState({bcimShowInfo: false});\n\n  /**\n   * updates each row in bcrows with a subject count and visit count array\n   */\n  bcimUpdateAllSubjectCountsAndVisitCounts = (subjectCount, visitCount) => {\n    let bcrowsCopy = {...this.state.bcrows};\n\n    Object.values(bcrowsCopy).filter(this.isClinical).forEach(obj => {\n      bcrowsCopy[obj.id].subjectCount = subjectCount;\n\n      //update the visit counts in each clinical services row\n      let vcArray = [];\n      for (let i=0; i<visitCount; i++) {\n        vcArray.push(false);\n      }\n      bcrowsCopy[obj.id].visitCount = vcArray;\n\n    });\n\n    this.setState({ bcrows:bcrowsCopy });\n\n    //now, ... update the visits header\n    this.csHeaderUpdate();\n  }\n\n  /**\n   * Check for selection status of each column of checkboxes AND check for no column, too.\n   */\n  cshUpdateCheckButtons = (state) => {\n    let btnStates = [];\n\n    //limit searched bcrows to the clinical rows\n    let clinicalRows = Object.values(state.bcrows).filter(this.isClinical);\n\n\n    for (let i=0; i<5; i++) {\n      let columnExists = (state.bcimShowInfoVisitCount >= (state.chsVisitIndex + i));\n\n      if (columnExists && clinicalRows.length > 0) {\n        //check for select and deselect\n        //TODO: if display optimization is needed, improve perfomance by finding any 'false' instead of all 'false' visitCount\n        let visitCountIndex = state.chsVisitIndex + i - 1;\n        let deselectedCheckboxFound = Object.values(clinicalRows).filter(obj=>{return (! obj.visitCount[ visitCountIndex ]);}).length > 0;\n\n        let stateToPush = 'deselect';\n        if (deselectedCheckboxFound) {\n          stateToPush = 'select';\n        }\n        btnStates.push(stateToPush);\n      }\n      else {\n        btnStates.push('disabled');\n      }\n      \n    }\n\n    return btnStates;\n  }\n\n  /**\n   * Updates all the buttons in the Visits header\n   */\n  csHeaderUpdate = () => {\n    this.setState((state,props)=>{\n      //update arrows\n      let leftArrow = \"disabled\";\n      let rightArrow = \"disabled\";\n\n      if (state.chsVisitIndex > 5) {\n        leftArrow = \"active\";\n      }\n\n      let hasMoreVisitsToNavigate = ((state.bcimShowInfoVisitCount - state.chsVisitIndex) >= 5);\n      if (hasMoreVisitsToNavigate) {\n        rightArrow = \"active\";\n      }\n\n      //update check buttons\n      let btnStates = this.cshUpdateCheckButtons(state);\n\n      //okay, ... technically this is where the real update happens\n      return {\n        chsLeftNavState:leftArrow,\n        chsRightNavState:rightArrow,\n        chsBtnStates:btnStates};\n\n    },  ()=>{this.cshUpdateAllClinicalTotals()});\n  }\n\n  csUpdateSubjectCountById = (e, id) => {\n\n    let bcrowsCopy = {...this.state.bcrows};\n    bcrowsCopy[id].subjectCount = e.target.value;\n    this.setState(\n      { bcrows:bcrowsCopy },\n      this.csUpdateClinicalTotals(id));\n  }\n\n  csUpdateColumnCheckButtonState = (visitIndex) => {\n\n    this.setState((state, props) => {\n      console.log(\"pts-69:csUpdateColumnCheckButtonState->visitIndex\",visitIndex);\n      console.log(\"pts-69:csUpdateColumnCheckButtonState->state\",state);\n\n      let rowsArray = Object.values(state.bcrows);\n      let foundNotSelected = false;\n\n      for (let i=0; i<rowsArray.length; i++) {\n        if (! rowsArray[i].visitCount[visitIndex]) {\n          foundNotSelected = true;\n          break;\n        }\n      }\n\n      let visibleColumn = visitIndex % 5;\n      if (foundNotSelected !== state.chsBtnStates[visibleColumn]) {\n        let chsBtnStatesCopy = [...state.chsBtnStates];\n\n        chsBtnStatesCopy[visibleColumn] = (foundNotSelected ? 'select' : 'deselect');\n        return { chsBtnStates:chsBtnStatesCopy};\n      }\n      else {\n        return {};\n      }\n\n    });\n\n  }\n\n  /**\n   * Updates a row's check button, then calls the fuction to set the total per subject.\n   */\n  csUpdateRowCheckButtonState = (rowId) => {\n\n    //check what the current state is vs what it should be before consuming cycles on creating a copy of bcrows\n    this.setState((state, props) => {\n      let visitsArray = state.bcrows[rowId].visitCount;\n      let foundNotSelected = false;\n\n      for (let i=0; i<visitsArray.length; i++) {\n        if (! visitsArray[i]) {\n          foundNotSelected = true;\n          break;\n        }\n      }\n\n      if (foundNotSelected !== state.bcrows[rowId].anyVistsNotSelected) {\n        let bcrowsCopy = {...state.bcrows};\n        bcrowsCopy[rowId].anyVistsNotSelected = foundNotSelected;\n        return { bcrows:bcrowsCopy};\n      }\n      else {\n        return {};\n      }\n    }, ()=>{this.csUpdateClinicalTotals(rowId);});\n\n\n  }\n\n  /**\n   * Called when a visit checkbox is clicked. After the checkbox state is updated, \n   * the check buttons on the column and row are updated if updateButtonsState=true.\n   */\n  csVisitChanged = (id, visitIndex, value) => {\n    this.setState((state, props) => {\n      console.log(\"pts-69:csVisitChange->state\",state);\n      console.log(\"pts-69:csVisitChange->visitIndex\",visitIndex);\n      console.log(\"pts-69:csVisitChange->value\",value);\n\n      let bcrowsCopy = {...state.bcrows};\n      bcrowsCopy[id].visitCount[visitIndex] = value;\n      return { bcrows:bcrowsCopy } \n    }, \n    ()=>{this.csUpdateColumnCheckButtonState(visitIndex); this.csUpdateRowCheckButtonState(id)});//update header check buttons and update row check button.\n  }\n\n  handleVisitRowButtonClicked = (id, select) => {\n    this.setState((state, props)=>{\n      let visitCountLength = state.bcrows[id].visitCount.length;\n      let bcrowsCopy = {...state.bcrows};\n\n\n      for (let i=0; i<visitCountLength; i++) {\n        if (state.bcrows[id].visitCount[i] !== select) {\n          bcrowsCopy[id].visitCount[i] = select;\n        }\n      }\n      return { bcrows:bcrowsCopy };\n    }, \n    ()=>{this.csHeaderUpdate(); this.csUpdateRowCheckButtonState(id)});//update header check buttons and update row check button.\n\n  }\n\n  csSetRowTotal = (rowId, bcrowsCopy) => {\n\n    let numberOfVisits = bcrowsCopy[rowId].visitCount.filter(v=>(v)).length;\n    let rowCostPerSubject = bcrowsCopy[rowId].costPerSubject;\n    let subjectCount = bcrowsCopy[rowId].subjectCount;\n\n    let totalRowCost = rowCostPerSubject * numberOfVisits * subjectCount;\n\n    bcrowsCopy[rowId].totalCost = totalRowCost;\n    return bcrowsCopy;\n  }\n\n  csTotalPerSubject = (state, rowId, bcrowsCopy) => {\n\n      let costPerSubject = 0.00;\n      let currentRow = state.bcrows[rowId];\n      let yourCost = (state.fundingType==='federal_rate') ? currentRow.federal_rate : currentRow.industry_rate;\n      let numberOfVisits = currentRow.visitCount.filter(obj => {return obj;}).length;\n\n      costPerSubject = yourCost * numberOfVisits;\n      bcrowsCopy[rowId].costPerSubject = costPerSubject;\n      return bcrowsCopy;\n  }\n\n  /**\n   * Calculate and Set Clinical Total Cost\n   */\n  csCalculateClinicalTotals = (bcrowsCopy) => {\n\n    let reducer = (acc, row) => {return acc + row.totalCost;}\n    let clinicalRows = Object.values(bcrowsCopy).filter(this.isClinical);\n    let newClinicalTotal = clinicalRows.reduce( reducer, 0 );\n\n    return newClinicalTotal;\n  }\n\n  csUpdateClinicalTotals = (rowId) => {\n\n    this.setState((state,props) => {\n\n      let bcrowsCopy = {...state.bcrows};\n \n      bcrowsCopy = this.csTotalPerSubject(state, rowId, bcrowsCopy);\n      bcrowsCopy = this.csSetRowTotal(rowId, bcrowsCopy);\n      let newClinicalTotal = this.csCalculateClinicalTotals(bcrowsCopy);\n\n      return { \n        bcrows:bcrowsCopy, \n        clinicalTotals:newClinicalTotal };\n    }, this.calculateGrandTotals);\n  }\n\n  cshUpdateAllClinicalTotals = () => {//TODO: move to correct section or rename\n\n    this.setState((state,props) => {\n\n      let bcrowsCopy = {...state.bcrows};\n      let clinicalRows = Object.values(bcrowsCopy).filter(this.isClinical);\n\n      // console.log(\"names are ... \",clinicalRows);\n\n      for (let i=0; i<clinicalRows.length; i++) {\n        bcrowsCopy = this.csTotalPerSubject(state, clinicalRows[i].key, bcrowsCopy);\n        bcrowsCopy = this.csSetRowTotal(clinicalRows[i].key, bcrowsCopy);\n      }\n\n      let newClinicalTotal = this.csCalculateClinicalTotals(bcrowsCopy);\n\n      return { \n        bcrows:bcrowsCopy, \n        clinicalTotals:newClinicalTotal };\n    }, this.calculateGrandTotals);\n  }\n\n  // END:  Clinical Services (CS) section\n  //\n  //////////////////////////////////////////\n\n\n\n  //////////////////////////////////////////\n  //\n  // BEGIN: NON-Clinical Services (NCS) section\n\n\n  /**\n   * Non-Clinical Totals for Budget\n   */\n  ncsCalculateNonclinicalTotals = () => {\n    let reducer = (acc, cur) => {return acc + cur.totalCost;}\n\n    this.setState((state, props) => {\n      let ncrt = Object.values(state.bcrows).filter(this.isNotClinical);\n      let newClinicalTotal = ncrt.reduce( reducer, 0 );\n      return {nonclinicalTotals: newClinicalTotal}\n    },\n    this.calculateGrandTotals);\n  }\n\n  // END:  NON-Clinical Services (NCS) section\n  //\n  //////////////////////////////////////////\n\n\n\n  /**\n   * Grand Total for Budget\n   */\n  calculateGrandTotals = () => {\n    this.setState((state, props) => {return {\n      grandTotal: (state.nonclinicalTotals + state.clinicalTotals)\n    }});\n  }\n\n\n  /**\n   * Non-Clinical Totals for Budget  ////TODO: REFACTOR NON-CLINICAL TOTALS METHODS!!!\n   */\n  // calculateNonclinicalTotals = () => {\n  //   let reducer = (acc, cur) => {return acc + cur;}\n  //   let ncrt = {...this.state.nonclinicalRowsTotal};\n  //   let newClinicalTotal = Object.values( ncrt ).reduce( reducer, 0 );\n\n  //   this.setState({nonclinicalTotals: newClinicalTotal},this.calculateGrandTotals);\n  // }\n\n  // addNonclinicalCost = (id, cost) => {\n  //   let addedToNCC = {nonclinicalRowsTotal: \n  //       {\n  //         ...this.state.nonclinicalRowsTotal,\n  //       [id]:cost}}\n\n  //   this.setState(\n  //     addedToNCC,\n  //     this.calculateNonclinicalTotals\n  //   );\n  // }\n\n  // removeNonclinicalCost = (id) => {\n  //   let updatedNCRT = {...this.state.nonclinicalRowsTotal};\n  //   delete updatedNCRT[id];\n  //   this.setState({\n  //             nonclinicalRowsTotal: updatedNCRT\n  //           }, this.calculateNonclinicalTotals);\n  // }\n\n\n\n\n  /**\n   * Used as callback from BCWelcomeModal.\n   */\n  setFundingType = (e, fundingType) => {\n    this.setState({ fundingType: fundingType });\n  }\n\n  handleQtyCountChange = (rowId, value) => {\n    let rowNotClinical;\n\n    this.setState((state, props) => {\n      let updatedBCRows = {...state.bcrows};\n\n      rowNotClinical = this.isNotClinical(updatedBCRows[rowId]);\n\n      updatedBCRows[rowId].quantity = value;\n\n      if (rowNotClinical) {\n        updatedBCRows[rowId].totalCost = updatedBCRows[rowId].yourCost * updatedBCRows[rowId].quantity;\n      }\n      else {\n        //TODO: handle clinical total change\n      }\n \n      return {bcrows: updatedBCRows};\n    }, () => {\n      //call the correct function based off the clinical type\n      if (rowNotClinical) {\n        this.ncsCalculateNonclinicalTotals();\n      }\n      else {\n        //TODO: calculate the clinical totals and grand total for UI\n      }\n    });\n\n  }\n\n\n  /**\n   * Removes a row from the bcrows state.\n   * Don't forget to update totals and grand total.\n   */\n  removeBCService = (e, serviceId) => {\n    let rowIsClinical;\n\n    this.setState((state, props) => {\n      let updatedBCRows = {...state.bcrows};\n\n      rowIsClinical = this.isNotClinical(updatedBCRows[serviceId]);\n\n      delete updatedBCRows[serviceId];\n      return {bcrows: updatedBCRows};\n    }, () => {\n      //call the correct function based off the clinical type\n      if (rowIsClinical) {\n        this.ncsCalculateNonclinicalTotals();\n      }\n      else {\n        //calculate the clinical totals and grand total for UI\n        this.cshUpdateAllClinicalTotals();\n        //update column buttons\n        this.csHeaderUpdate();\n      }\n    });\n  }\n\n  /**\n   * Take care of updates related to adding a service, such as updating the visits header selection buttons.\n   */\n  addServiceUpdates = (needsSubjectsAndVisits, serviceObj, oneTimeUseId) => {\n    //first time a clinical service is added, we need to get the visit count and the subject count\n    if (needsSubjectsAndVisits) {\n      this.cshSubjectsAndVisitsNeeded(oneTimeUseId);\n    }\n    else {\n      //update header buttons if clinical service added\n      if (serviceObj.clinical === \"1\") {\n        this.csHeaderUpdate();\n      }\n    }\n  }\n\n  /**\n   * ServiceMenuItems call this context method to add instances of \n   * service rows to state.bcrows for display in the UI.\n   */\n  addBCService = (e, serviceRow) => {\n    e.persist();\n    e.preventDefault();\n\n    let bu = new BudgetUtils();\n\n    // Creating an ID/key for this service row\n    // Good for a few thousand budget items without worrying about collisions.\n    let oneTimeUseId = '_' + Math.random().toString(36).substr(2, 9);\n\n    let serviceObj = JSON.parse(serviceRow)[0];//NOTE: snake case property names will end up in the object\n\n    // If this is a clinical service, then it needs subjects and visits pre-populated to defaults\n    // Use of this.state won't cause issues because the value used here does not change.\n    let needsSubjectsAndVisits = (! this.state.bcInfoModalUsedOnce) && parseInt(serviceObj[\"clinical\"]);\n\n    this.setState((state, props) => {\n\n      serviceObj[\"id\"] = oneTimeUseId;\n      serviceObj[\"key\"] = oneTimeUseId;\n      serviceObj[\"subjectCount\"] = state.bcimShowInfoSubjectCount;\n      \n      serviceObj[\"visitCount\"] = [];\n      for (let i=0; i<state.bcimShowInfoVisitCount; i++) \n      {\n        serviceObj[\"visitCount\"].push(false);\n      }\n\n      serviceObj[\"anyVistsNotSelected\"] = true;\n      serviceObj[\"costPerSubject\"] = 0.00;\n      serviceObj[\"totalCost\"] = 0.00;\n\n      serviceObj[\"yourCost\"] = bu.findYourRate(state.fundingType, serviceObj.federal_rate, serviceObj.industry_rate);\n      serviceObj[\"quantity\"] = 1;\n      serviceObj[\"totalCost\"] = serviceObj.yourCost * serviceObj.quantity;\n\n      return ({\n        bcrows: \n        { \n          ...state.bcrows, \n          [oneTimeUseId]:serviceObj\n        }\n      });\n    }, () => {\n      this.addServiceUpdates(needsSubjectsAndVisits, serviceObj, oneTimeUseId);\n    \n      //call the correct function based off the clinical type\n      if (this.isNotClinical(serviceObj)) {\n        this.ncsCalculateNonclinicalTotals();\n      }\n      else {\n        //TODO: calculate the clinical totals and grand total for UI\n      }\n    });\n  }\n\n  render() { \n    return ( \n      <BudgetContext.Provider\n        value={{\n          bcstate: this.state,\n          bcrows: this.state.bcrows,\n          fundingType: this.state.fundingType,\n\n          nonclinicalTotals: this.state.nonclinicalTotals,\n          clinicalTotals: this.state.clinicalTotals,\n          grandTotal: this.state.grandTotal,\n\n          perService: this.state.perService,\n\n          // addNonclinicalCost: this.addNonclinicalCost,\n          // removeNonclinicalCost: this.removeNonclinicalCost,\n\n          addBCService: this.addBCService, \n          removeBCService: this.removeBCService,\n          setFundingType: this.setFundingType,\n\n          chsLeftNavState: this.state.chsLeftNavState,\n          chsRightNavState: this.state.chsRightNavState,\n          chsBtnStates: this.state.chsBtnStates,\n          chsVisitIndex: this.state.chsVisitIndex,\n          chsVisitAllSelected: this.state.chsVisitAllSelected,\n\n          cshNavLeft: this.cshNavLeft,\n          cshNavRight: this.cshNavRight,\n          cshButtonClicked: this.cshButtonClicked,\n\n          bcimShowInfo: this.state.bcimShowInfo,\n          bcimShowInfoSubjectCount: this.state.bcimShowInfoSubjectCount,\n          bcimShowInfoVisitCount: this.state.bcimShowInfoVisitCount,\n          bcimInfoCallback: this.bcimInfoCallback,\n          bcimHandleHideInfo: this.bcimHandleHideInfo,\n\n          csUpdateSubjectCountById: this.csUpdateSubjectCountById,\n          csVisitChanged: this.csVisitChanged,\n          handleVisitRowButtonClicked: this.handleVisitRowButtonClicked,\n\n          handleQtyCountChange: this.handleQtyCountChange\n\n        }}>\n        {this.props.children}\n      </BudgetContext.Provider>\n     );\n  }\n}\n \nexport default BudgetProvider;","import React, { Component } from 'react';\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport FormCheck from 'react-bootstrap/FormCheck';\n\nclass BCWelcomeModal extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showWelcome: props.showWelcome,\n      welcomeCallback: props.welcomeCallback,\n      buttonActive: false,\n      setFundingType: props.setFundingType\n    }\n    this.selection = React.createRef();\n  }\n\n  handleCheck = (e) => this.setState({buttonActive: e.target.checked});\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.state.setFundingType(e, this.selection.current.value);\n    this.state.welcomeCallback( this.selection.current.value );\n    this.setState({showWelcome: false})\n\n  }\n\n  render() { \n    return (\n      <Modal id=\"welcomeModal\" centered backdrop=\"static\" show={this.props.showWelcome} aria-labelledby=\"welcomeModal\" aria-hidden=\"true\">\n          <div role=\"document\">\n            <Form id=\"welcomeForm\" onSubmit={this.handleSubmit}>\n            <Modal.Body>\n              <p>Thank you for using the Budget Calculator! Please provide the following information to get started.</p>\n\n                <Form.Row>\n                    <Form.Group className=\"initial-info\">\n                      <Form.Label htmlFor=\"fundingType\">\n                        <b>Funding Type:</b>\n                      </Form.Label>\n                      <Form.Control className=\"info-field\" as=\"select\" id=\"fundingType\" name=\"fundingType\" ref={this.selection} required>\n                        <option value=\"\">---Select---</option>\n                        <option value=\"industry_rate\">Industry Rate</option>\n                        <option value=\"federal_rate\">Federal Rate</option>\n                      </Form.Control>\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Row className=\"welcomeOnly\">\n                  <Form.Check>\n                    <FormCheck.Input type=\"checkbox\" id=\"termsCheckbox\" name=\"termsCheckbox\"  onChange={this.handleCheck} />\n                    <Form.Label htmlFor=\"termsCheckbox\">\n                      I understand that this tool is intended for budgeting purposes only and rates are subject to change.\n                    </Form.Label>\n                  </Form.Check>\n                </Form.Row>\n\n                <input type=\"hidden\" name=\"redcap_csrf_token\" value=\"\" />\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"primary\" disabled={! this.state.buttonActive} type=\"submit\">Create New Budget</Button>\n            </Modal.Footer>\n          </Form>\n\n      </div>\n      </Modal>\n     );\n  }\n}\n\n\n \nexport default BCWelcomeModal;","import React, { Component } from 'react';\nimport BudgetCalculator from './budgetcalculator/BudgetCalculator';\n\nimport BudgetProvider from '../contexts/BudgetProvider';\nimport BCWelcomeModal from './budgetcalculator/BCWelcomeModal';\n\nimport BudgetContext from '../contexts/BudgetContext';\n\nclass BudgetCalculatorPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showWelcome: true,//TODO: Set to false for debugging. Set to true for production\n    }\n  }\n\n  welcomeCallback = (fundingType) => {\n    this.setState({showWelcome: false})\n  }\n\n  render() { \n    return ( \n      <BudgetProvider>\n        <BudgetContext.Consumer>\n          {context => (\n            <>\n              <BudgetCalculator \n                bcstate={context.bcstate}/>\n              <BCWelcomeModal \n                showWelcome={this.state.showWelcome} \n                welcomeCallback={this.welcomeCallback} \n                hideWelcome={this.handleHideWelcome} \n                setFundingType={context.setFundingType}/>\n            </>\n          )}\n        </BudgetContext.Consumer>\n\n        \n      </BudgetProvider>\n     );\n  }\n}\n \nexport default BudgetCalculatorPage;","import React from 'react';\n\nimport BudgetCalculatorPage from './components/BudgetCalculatorPage';\n\n// Importing the Bootstrap CSS\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BudgetCalculatorPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      console.log(\"window.location.hostname=\"+window.location.hostname)\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}